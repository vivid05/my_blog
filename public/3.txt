---
title: Vue3响应式系统的设计与实现
author: 吴伟伟
date: 2023-08-02
category: 前端开发
cover: https://picsum.photos/id/1/1200/600
---

# **Vue3响应式系统的设计与实现**

---

前序：本次分享内容为利用vue3的响应式核心原理来一步步实现一个响应式系统。&#x20;

### 抛出一个需求

如图所示，实现点击增加按钮每次自增加一并同步结果到计数。

<img src="/my_blog/src/assets/1.png" alt="image">

&#x20;

如果是使用vue3来实现那代码可以如下：

```typescript
let number = ref(1)
const incrementCount = () => {
  number.value++
}
```

可以看到代码十分简单，这是因为vue3将number实现了响应式，我们只需要关注数据的变化，而不用关心数据的渲染问题。

如果不借助任何第三方框架和库又如何实现呢？

```typescript
let number = 1
function incrementCount() {
  number++
  document.querySelector('#number').innerText = number
}
```

可以看到使用原生js来实现的话，会多出一行代码就是更新DOM。

接下来我们就来用原生js来实现vue3的响应式效果

### 需求分析

不难看出增加函数中有两步操作

- number自增

- 更新DOM

上面说到vue3让我们只需要关注数据的变化，而不用关心数据的渲染问题。那我们就需要实现像vue3同样的效果，即将number变成一个响应式数据。那么问题就来了，DOM谁来更新？要解决这个问题就需要利用到ES6中新增的API--[Proxy](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)

简单总结一下Proxy的作用：

1. 代理劫持一个对象

2. get(),当读取代理对象的属性值时触发

3) set(),当设置代理对象属性值时触发

&#x20;

🌰：

```javascript
const obj = new Proxy(
  { number: 1 },
  {
    // 拦截读取操作
    get(target, key) {
      // 返回属性值
      return target[key]
    },
    // 拦截设置操作
    set(target, key, newVal) {
      // 设置属性值
      target[key] = newVal
    }
  }
)

// 读取
console.log(obj.number)
// 设置
obj.number = 2
```

以上不管是读取还是设置number，都会触发相应的方法。这样一来上面的问题似乎就有了答案。DOM谁来更新？--set()来更新，因为设置number自增后就会触发到set()从而更新DOM。

### 设计与实现

先抛出一个概念--副作用函数。

```javascript
function effect() {
  document.querySelector('#number').innerText = obj.number
}
```

副作用函数可以简单理解成，当number数值发生变化时，会影响effect函数的执行，那这样的函数就称为副作用函数。在这个场景下，通俗的讲副作用函数就是负责更新DOM。

接着上文思考，如何才能让obj变成响应式数据呢？通过观察我们能发现两点线索：

\- 当副作用函数effect执行时，会触发字段obj.number的读取操作；（读取操作）

\- 当修改obj.number的值时，会触发字段obj.number的设置操作；（设置操作）

再结合上文介绍的Proxy事情就变得简单了，当读取字段obj.number时，我们可以把副作用函数effect存储到一个专门存放副作用函数的“桶”里。

接下来我们就根据如上思路，采用Proxy来实现：

```javascript
<!-- 存储副作用函数的桶 -->
const bucket = []

// 对原始数据的代理
const obj = new Proxy({ number: 1 }, {
  // 拦截读取操作
  get(target,key) {
    // 将副作用函数effect添加到存储副作用函数的桶中
    bucket.push(effect)
    // 返回属性值
    return target[key]
  },

  // 拦截设置操作
  set(target, key, newVal) {
    // 设置属性值
    target[key] = newVal
    // 把副作用函数从桶里面取出并执行
    bucket.forEach(fn => fn())
  }
})

function effect() {
        document.querySelector('#number').innerText = obj.number  // 记住这里是obj，使用的是代理之后的数据
}
effect()

function incrementCount() {
  obj.number++
}
```

这段代码基本可以实现起初抛出的问题，但还存在很多缺陷，需要继续完善，下面继续来分析。

通过上面的代码我们了解了如何实现响应式数据。但其实在这个过程中我们已经实现了一个微型响应

系统，之所以说“微型”，是因为它还不完善。

从上一节的例子中不难看出，一个响应系统的工作流程如下：

\- 当读取操作发生时，将副作用函数收集到“桶”中；

\- 当设置操作发生时，从“桶”中取出副作用函数并执行。

看上去很简单，但需要处理的细节还真不少。例如在上一节的实现中，我们硬编码了副作用函数的名字（effect），导致一旦副作用函数的名字不叫effect，那么这段代码就不能正确地工作了。而我们希望的是，哪怕副作用函数是一个匿名函数，也能够被正确的收集到“桶”中。为了实现这一点，我们需要提供一个用来注册副作用函数的机制，如以下代码所示：

```javascript
// 用一个全局变量存储被注册的副作用函数
let activeEffect
// effect函数用于注册副作用函数
function effect(fn) {
  // 当调用effect注册副作用函数时，将副作用函数fn赋值给activeEffect
  activeEffect = fn
  // 执行副作用函数
  fn()
}

// 如何使用
effect(
  // 一个匿名的副作用函数
  () => {
    document.querySelector('#number').innerText = obj.number
  }
)
```

首先，定义了一个全局变量activeEffect，初始值是undefined，它的作用是存储被注册的副作用函数。接着重新定义了effect函数，它变成了一个用来注册副作用函数的函数，effect函数接收一个参数fn，即要注册的副作用函数。

接着再改造下Proxy实现：

```javascript
const obj = new Proxy(data, {
  get(target, key) {
    // 将activeEffect中存储的副作用函数收集到“桶”中
    if (activeEffect) {
      bucket.push(activeEffect)
    }
    return target[key]
  },
  set(target, key, newVal) {
    target[key] = newVal
    bucket.forEach(fn => fn())
    return true
  }
})
```

如上面的代码所示，由于副作用函数已经存储到了activeEffect中，所以在get拦截函数内

应该把activeEffect收集到‘桶’中，这样响应系统就不依赖副作用函数的名字了。

但此时又出现了另外的缺陷，例如在响应式数据obj上设置一个不存在的属性时：

```html
effect(
<!-- 匿名副作用函数 -->
() => { console.log('effect run') // 会打印 document.querySelector('#number').innerText = obj.number } ) setTimeout(() => {
<!-- 副作用函数中并没有读取notExist属性的值 -->
obj.notExist = 'hello vue3' }, 1000)
```

可以看到，在匿名副作用函数内并没有读取obj.notExist属性的值，所以理论上，字段obj.notExist并没有与副作用函数建立响应联系，因此，定时器内语句的执行不应该触发匿名副作用函数重新执行。这个问题的原因在于副作用函数没有与其对应的依赖属性建立联系关系，为了解决这个问题，我们需要重新设计一下“桶”的数据结构。

在重新设计数据结构之前先熟悉一下要用到的数据类型：[Map](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)、[WeakMap](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)、[Set](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set)

Map 对象保存键值对，任何值（对象或者[原始值](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)）都可以作为一个键或一个值。

WeakMap 对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。

Set 对象允许你存储任何类型的唯一值，无论是[原始值](https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive)或者是对象引用。

利用以上三种数据类型可以设想数据结构如下图所示：

<img src="/my_blog/src/assets/2.png" alt="image">

从图中可以看出构建数据结构的方式，我们分别使用了WeakMap、Map和Set：

\- WeakMap由target --> Map 构成；

\- Map由 key --> Set 构成。

其中WeakMap的键是原始对象target，WeakMap的值是一个Map实例，而Map的键是原

始对象target的key，Map的值是一个由副作用函数组成的Set。

设计好新的数据结构后，我们再重新构建响应式系统的代码：

```javascript
// 存储副作用函数的桶
const bucket = new WeakMap()

// 用一个全局变量存储当前激活的 effect 函数
let activeEffect

const obj = new Proxy(
  { number: 1 },
  {
    // 拦截读取操作
    get(target, key) {
      // 将副作用函数activeEffect添加到存储副作用函数的桶中
      track(target, key)
      // 返回属性值
      return target[key]
    },
    // 拦截设置操作
    set(target, key, newVal) {
      // 设置属性值
      target[key] = newVal
      // 把副作用函数从桶中取出并执行
      trigger(target, key)
    }
  }
)

// 在get拦截函数内调用track函数追踪变化
function track(target, key) {
  // 没有activeEffect，直接return
  if (!activeEffect) return
  let depsMap = bucket.get(target)
  if (!depsMap) {
    bucket.set(target, (depsMap = new Map()))
  }
  let deps = depsMap.get(key)
  if (!deps) {
    depsMap.set(key, (deps = new Set()))
  }
  deps.add(activeEffect)
}
// 在set拦截函数内调用trigger函数触发变化
function trigger(target, key) {
  const depsMap = bucket.get(target)
  if (!depsMap) return
  const effects = depsMap.get(key)
  effects && effects.forEach(fn => fn())
}
```

如以上代码所示，分别把逻辑封装到track和trigger函数内，这能为我们带来极大的灵活性。

下面再讨论一个新的问题：

```coffeescript
effect(() => {
        document.querySelector('#notExist').innerText = obj.ok ? obj.number : 'not'
})
setTimeout(() => {
        obj.ok = false
}, 1000)
```

当字段obj.ok的值修改为false，并触发副作用函数重新执行后，由于此时字段obj.number不

会被读取，只会触发字段obj.ok的读取操作，所以理想情况下此时修改number的值，不应该再触发该副作用函数，但结果并非如此。

分析其原因可以知道，ok的值一开始为true，此时三元表达式会读取到number的值，从而收集到了number的副作用函数到”桶“，接着将ok设为false，再修改number的值就会触发到number的副作用的函数。

为了解决这个这个问题我们思路如下：

每次副作用函数执行时，我们可以先把它从所有与之关联的依赖集合中删除。

```javascript
let activeEffect
function effect(fn) {
  const effectFn = () => {
    // 当effectFn执行时，将其设置为当前激活的副作用函数
    activeEffect = effectFn
    fn()
  }
  // activeEffect.deps用来存储所有与该副作用函数相关联的依赖集合
  effectFn.deps = []
  // 执行副作用函数
  effectFn()
}
```

要将一个副作用函数从所有与之关联的依赖集合中移除，就需要明确知道哪些依赖集合中包含它，因此我们需要重新设计副作用函数，如上面面的代码所示。在effect内部我们定义了新的effectFn函数，并为其添加了effectFn.deps属性，该属性是一个数组，用来存储所有包含当前副作用函数的依赖集合。

那么effectFn.deps数组中的依赖集合是如何收集的呢？其实是在track函数中：

```javascript
function track(target, key) {
  // 没有activeEffect，直接return
  if (!activeEffect) return
  let depsMap = bucket.get(target)
  if (!depsMap) {
    bucket.set(target, (depsMap = new Map()))
  }
  let deps = depsMap.get(key)
  if (!deps) {
    depsMap.set(key, (deps = new Set()))
  }
  // 把当前激活的副作用函数添加到依赖集合deps中
  deps.add(activeEffect)
  // deps就是一个与当前副作用函数存在联系的依赖集合
  // 将其添加到activeEffect.deps数组中
  activeEffect.deps.push(deps) // 新增
}
```

如上代码所示，deps就是一个与当前副作用函数存在联系的依赖集合，于是我们也把它添加

到activeEffect.deps数组中，这样就完成了对依赖集合的收集。

收集之后我们就可以在合适的时机将它移除了：

```javascript
function effect(fn) {
  const effectFn = () => {
    // 调用cleanup函数完成清除工作
    cleanup(effectFn) // 新增
    activeEffect = effectFn
    fn()
  }
  effectFn.deps = []
  effectFn()
}

function cleanup(effectFn) {
  // 遍历effectFn.deps数组
  for (let i = 0; i < effectFn.deps.length; i++) {
    // deps是依赖集合
    const deps = effectFn.deps[i]
    // 将effectFn从依赖集合中移除
    deps.delete(effectFn)
  }
  // 最后需要重置effectFn.deps数组
  effectFn.deps.length = 0
}
```

cleanup函数接收副作用函数作为参数，遍历副作用函数的effectFn.deps数组，该数组

的每一项都是一个依赖集合，然后将该副作用函数从依赖集合中移除，最后重置effectFn.

deps数组。

以上就实现一个可用的响应式系统了。

### End
