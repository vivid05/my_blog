# Git 分支合并自动化工具

> 一个高效、安全的 Git 分支合并自动化脚本，支持多环境配置、演练模式和详细的操作日志。

## ✨ 功能特性

- 🔄 **自动化合并流程** - 一键完成分支合并到目标环境
- 🎯 **多环境支持** - 支持开发、测试等多个环境配置
- 🛡️ **安全操作** - 内置安全检查和自动清理机制
- 🎭 **演练模式** - 预览操作而不执行实际命令
- 📝 **详细日志** - 彩色输出和详细的操作记录
- ⚙️ **灵活配置** - JSON 配置文件，支持自定义环境和策略
- 🚫 **错误恢复** - 异常情况下自动切换回原始分支
- 📊 **状态检查** - 智能检测 Git 仓库状态和分支变更

### 基本使用

```bash
# 交互模式
./git_optimized.sh

# 自动模式
./git_optimized.sh -a -e 1 -c "修复登录bug"
```

## 📖 详细用法

### 命令行选项

| 选项     | 长选项         | 描述                       |
| -------- | -------------- | -------------------------- |
| `-h`     | `--help`       | 显示帮助信息               |
| `-v`     | `--verbose`    | 详细模式输出               |
| `-d`     | `--dry-run`    | 演练模式（不执行实际操作） |
| `-a`     | `--auto`       | 自动模式（使用默认值）     |
| `-c MSG` | `--commit MSG` | 指定提交信息               |
| `-e ENV` | `--env ENV`    | 指定目标环境 (0-3)         |
|          | `--config`     | 编辑配置文件               |
|          | `--list-envs`  | 列出可用环境               |
|          | `--version`    | 显示版本信息               |

### 工作流程

1. **检查 Git 状态** - 验证仓库状态和未提交更改
2. **提交当前更改** - 自动添加并提交工作目录中的更改
3. **推送源分支** - 将当前分支推送到远程仓库
4. **切换目标分支** - 安全切换到指定的目标分支
5. **拉取最新代码** - 获取目标分支的最新更改
6. **执行合并操作** - 将源分支合并到目标分支
7. **推送合并结果** - 将合并后的代码推送到远程
8. **恢复原分支** - 切换回原始工作分支

## ⚙️ 配置文件

配置文件位置：`~/.git-merge-config.json`

### 默认配置结构

```json
{
  "environments": {
    "0": {
      "name": "develop (H5)",
      "branch": "develop"
    },
    "1": {
      "name": "测试环境1",
      "branch": "sprint/hwsocial_test1"
    },
    "2": {
      "name": "测试环境2",
      "branch": "sprint/hwsocial_test2"
    },
    "3": {
      "name": "测试环境3",
      "branch": "sprint/hwsocial_test3"
    }
  },
  "default_commit_format": "更新: %Y-%m-%d %H:%M",
  "auto_push": true,
  "merge_strategy": "no-edit"
}
```

### 配置项说明

| 配置项                  | 类型    | 描述                               |
| ----------------------- | ------- | ---------------------------------- |
| `environments`          | Object  | 环境配置映射                       |
| `default_commit_format` | String  | 默认提交信息格式（支持 date 格式） |
| `auto_push`             | Boolean | 是否自动推送到远程                 |
| `merge_strategy`        | String  | 合并策略 (`no-edit`, `squash`)     |

## 💡 使用示例

### 交互模式

```bash
./git_optimized.sh
```

脚本会引导您选择环境和输入提交信息。

### 快速合并到测试环境 1

```bash
./git_optimized.sh -e 1 -c "修复用户登录bug"
```

### 演练模式（预览操作）

```bash
./git_optimized.sh -d -e 0 -c "新增功能"
```

### 详细输出模式

```bash
./git_optimized.sh -v -e 2 -c "更新依赖包"
```

### 自动化 CI/CD 使用

```bash
./git_optimized.sh -a -e 1 -c "自动部署 $(date '+%Y-%m-%d %H:%M')"
```

### 管理配置

```bash
# 编辑配置文件
./git_optimized.sh --config

# 查看可用环境
./git_optimized.sh --list-envs

# 查看版本信息
./git_optimized.sh --version
```

## 🛡️ 安全特性

### 1. 状态检查

- 验证 Git 仓库有效性
- 检查未提交的更改
- 确认分支存在性

### 2. 错误恢复

- 异常退出时自动切换回原分支
- 临时文件自动清理
- 详细的错误信息输出

### 3. 演练模式

- 完全模拟操作流程
- 不执行任何实际的 Git 命令
- 安全的预览功能

### 4. 分支保护

- 智能分支切换和创建
- 远程分支跟踪
- 防止意外的分支操作

## 🔧 故障排除

### 常见问题

**Q: 提示"需要安装 jq"怎么办？**

```bash
# macOS
brew install jq

# Linux
sudo apt-get install jq  # Ubuntu/Debian
sudo yum install jq      # CentOS/RHEL
```

**Q: 脚本执行失败后如何恢复？**

- 脚本会自动尝试切换回原始分支
- 手动执行：`git checkout <原始分支名>`
- 检查 Git 状态：`git status`

**Q: 如何重置配置文件？**

```bash
rm ~/.git-merge-config.json
./git_optimized.sh --config
```

**Q: 合并冲突怎么处理？**

- 脚本会暂停并显示冲突信息
- 手动解决冲突后运行：`git add . && git commit`
- 然后重新运行脚本

### 调试模式

```bash
# 使用详细输出模式
./git_optimized.sh -v

# 结合演练模式调试
./git_optimized.sh -d -v -e 1
```

## 📁 完整源代码

> **💡 提示**: 完整的 488 行源代码如下，您可以复制到本地文件中使用。

<details>
<summary><strong>📖 点击这里展开/折叠完整源代码</strong></summary>

<br>

**文件名**: `git_optimized.sh`

```bash
#!/bin/bash

# ===================================
# Git 分支合并自动化工具 (优化版本)
# ===================================

# 设置严格模式
set -euo pipefail

# 脚本版本
readonly SCRIPT_VERSION="2.0.0"

# 配置文件路径
readonly CONFIG_FILE="${HOME}/.git-merge-config.json"

# 临时文件跟踪
TEMP_FILES=()
trap cleanup EXIT

# 颜色定义
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[1;36m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # 无颜色

# 全局变量
ORIGINAL_BRANCH=""
TEMP_BRANCH=""
DRY_RUN=false
VERBOSE=false
AUTO_MODE=false
COMMIT_MSG=""
TARGET_ENV=""

# ===================================
# 工具函数
# ===================================

# 清理函数
cleanup() {
    local exit_code=$?

    # 清理临时文件
    if [[ ${#TEMP_FILES[@]} -gt 0 ]]; then
        for temp_file in "${TEMP_FILES[@]}"; do
            [[ -f "$temp_file" ]] && rm -f "$temp_file"
        done
    fi

    # 如果是异常退出且不在原始分支，尝试切换回去
    if [[ $exit_code -ne 0 && -n "$ORIGINAL_BRANCH" ]]; then
        local current_branch
        current_branch=$(git branch --show-current 2>/dev/null || echo "")
        if [[ "$current_branch" != "$ORIGINAL_BRANCH" ]]; then
            echo -e "${YELLOW}[清理]${NC} 尝试切换回原始分支: $ORIGINAL_BRANCH" >&2
            git checkout "$ORIGINAL_BRANCH" 2>/dev/null || true
        fi
    fi

    exit $exit_code
}

# 输出函数
print_message() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[成功]${NC} $1"
}

print_error() {
    echo -e "${RED}[错误]${NC} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}[警告]${NC} $1"
}

print_debug() {
    if [[ "$VERBOSE" == true ]]; then
        echo -e "${PURPLE}[调试]${NC} $1" >&2
    fi
}

# 安全的命令执行函数
safe_run() {
    local cmd=("$@")
    local temp_file
    temp_file=$(mktemp)
    TEMP_FILES+=("$temp_file")

    print_debug "执行命令: ${cmd[*]}"

    if [[ "$DRY_RUN" == true ]]; then
        print_warning "[演练模式] 将要执行: ${cmd[*]}"
        return 0
    fi

    # 执行命令并捕获输出
    if "${cmd[@]}" > "$temp_file" 2>&1; then
        if [[ "$VERBOSE" == true ]]; then
            cat "$temp_file"
        fi
        return 0
    else
        local exit_code=$?
        print_error "命令执行失败: ${cmd[*]}"
        print_error "错误详情:"
        cat "$temp_file" >&2
        return $exit_code
    fi
}

# 创建默认配置文件
create_default_config() {
    cat > "$CONFIG_FILE" << 'EOF'
{
  "environments": {
    "0": {
      "name": "develop (H5)",
      "branch": "develop"
    },
    "1": {
      "name": "测试环境1",
      "branch": "sprint/hwsocial_test1"
    },
    "2": {
      "name": "测试环境2",
      "branch": "sprint/hwsocial_test2"
    },
    "3": {
      "name": "测试环境3",
      "branch": "sprint/hwsocial_test3"
    }
  },
  "default_commit_format": "更新: %Y-%m-%d %H:%M",
  "auto_push": true,
  "merge_strategy": "no-edit"
}
EOF
    print_success "已创建默认配置文件: $CONFIG_FILE"
}

# 读取配置
load_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        print_warning "配置文件不存在，创建默认配置"
        create_default_config
    fi

    # 检查 jq 是否可用
    if ! command -v jq >/dev/null 2>&1; then
        print_error "需要安装 jq 来解析配置文件"
        print_message "请运行: brew install jq (macOS) 或 apt-get install jq (Ubuntu)"
        exit 1
    fi
}

# 获取环境列表
get_environments() {
    jq -r '.environments | to_entries[] | "\(.key) - \(.value.name)"' "$CONFIG_FILE"
}

# 获取分支名称
get_branch_name() {
    local env_key="$1"
    jq -r ".environments[\"$env_key\"].branch" "$CONFIG_FILE"
}

# 验证Git仓库
validate_git_repo() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        print_error "当前目录不是Git仓库"
        exit 1
    fi

    # 检查是否有远程仓库
    if ! git remote get-url origin >/dev/null 2>&1; then
        print_warning "没有配置origin远程仓库"
    fi
}

# 检查Git状态
check_git_status() {
    local status
    status=$(git status --porcelain)

    if [[ -n "$status" ]]; then
        print_message "检测到未提交的更改:"
        git status --short
        return 1
    else
        print_message "工作目录是干净的"
        return 0
    fi
}

# 检查分支是否存在
branch_exists() {
    local branch_name="$1"
    local location="$2" # local 或 remote

    case "$location" in
        local)
            git show-ref --verify --quiet "refs/heads/$branch_name"
            ;;
        remote)
            git show-ref --verify --quiet "refs/remotes/origin/$branch_name"
            ;;
        *)
            print_error "无效的位置参数: $location"
            return 1
            ;;
    esac
}

# 安全的分支切换
safe_checkout() {
    local branch_name="$1"
    local create_if_missing="${2:-false}"

    print_message "切换到分支: $branch_name"

    if branch_exists "$branch_name" "local"; then
        safe_run git checkout "$branch_name"
    elif branch_exists "$branch_name" "remote" && [[ "$create_if_missing" == true ]]; then
        print_message "创建本地分支并跟踪远程分支"
        safe_run git checkout -b "$branch_name" "origin/$branch_name"
    else
        print_error "分支 $branch_name 不存在"
        return 1
    fi
}

# 安全的分支合并
safe_merge() {
    local source_branch="$1"
    local strategy="${2:-no-edit}"

    print_message "合并分支 $source_branch 到当前分支"

    case "$strategy" in
        no-edit)
            safe_run git merge --no-edit "$source_branch"
            ;;
        squash)
            safe_run git merge --squash "$source_branch"
            ;;
        *)
            print_error "不支持的合并策略: $strategy"
            return 1
            ;;
    esac
}

# 显示帮助信息
show_help() {
    cat << EOF
Git 分支合并自动化工具 v$SCRIPT_VERSION

用法: $0 [选项]

选项:
    -h, --help          显示此帮助信息
    -v, --verbose       详细模式
    -d, --dry-run       演练模式（不执行实际操作）
    -a, --auto          自动模式（使用默认值）
    -c, --commit MSG    指定提交信息
    -e, --env ENV       指定目标环境 (0-3)
    --config            编辑配置文件
    --list-envs         列出可用环境
    --version           显示版本信息

示例:
    $0                          # 交互模式
    $0 -e 1 -c "修复bug"        # 合并到测试环境1
    $0 -d -e 0                  # 演练模式合并到develop
    $0 --config                 # 编辑配置文件

配置文件位置: $CONFIG_FILE
EOF
}

# 显示版本信息
show_version() {
    echo "Git 分支合并自动化工具 v$SCRIPT_VERSION"
}

# 编辑配置文件
edit_config() {
    local editor="${EDITOR:-vi}"

    if [[ ! -f "$CONFIG_FILE" ]]; then
        create_default_config
    fi

    print_message "使用 $editor 编辑配置文件..."
    "$editor" "$CONFIG_FILE"
}

# 列出环境
list_environments() {
    print_message "可用环境:"
    get_environments | while read -r env; do
        echo -e "  ${YELLOW}$env${NC}"
    done
}

# 获取用户输入
get_user_input() {
    if [[ "$AUTO_MODE" == true ]]; then
        return 0
    fi

    # 获取提交信息
    if [[ -z "$COMMIT_MSG" ]]; then
        echo -e "${BLUE}请输入提交信息 (留空使用默认信息):${NC}"
        read -r COMMIT_MSG

        if [[ -z "$COMMIT_MSG" ]]; then
            local format
            format=$(jq -r '.default_commit_format' "$CONFIG_FILE")
            COMMIT_MSG=$(date +"$format")
            print_message "使用默认提交信息: \"$COMMIT_MSG\""
        fi
    fi

    # 获取目标环境
    if [[ -z "$TARGET_ENV" ]]; then
        echo -e "${BLUE}请输入要合并的目标环境:${NC}"
        get_environments | while read -r env; do
            echo -e "  ${YELLOW}$env${NC}"
        done
        read -r TARGET_ENV
    fi

    # 验证环境选择
    local available_envs
    available_envs=$(jq -r '.environments | keys[]' "$CONFIG_FILE")
    if ! echo "$available_envs" | grep -q "^$TARGET_ENV$"; then
        print_error "无效的环境选择: $TARGET_ENV"
        exit 1
    fi
}

# 显示操作摘要
show_summary() {
    local target_branch
    target_branch=$(get_branch_name "$TARGET_ENV")

    echo -e "${YELLOW}======================================${NC}"
    print_message "操作摘要:"
    echo -e "  源分支: ${YELLOW}$ORIGINAL_BRANCH${NC}"
    echo -e "  目标分支: ${YELLOW}$target_branch${NC}"
    echo -e "  提交信息: ${YELLOW}$COMMIT_MSG${NC}"
    echo -e "  模式: ${YELLOW}$([ "$DRY_RUN" == true ] && echo "演练模式" || echo "执行模式")${NC}"
    echo -e "${YELLOW}======================================${NC}"

    # 自动执行，无需确认
    print_message "自动执行上述操作..."
}

# 主要的合并逻辑
execute_merge() {
    local target_branch
    target_branch=$(get_branch_name "$TARGET_ENV")

    print_message "开始执行合并操作..."

    # 1. 检查并提交当前更改
    if ! check_git_status; then
        print_message "添加并提交当前更改..."
        safe_run git add .
        safe_run git commit -m "$COMMIT_MSG"
    fi

    # 2. 推送当前分支
    print_message "推送当前分支到远程仓库..."
    safe_run git push origin "$ORIGINAL_BRANCH"

    # 3. 切换到目标分支
    safe_checkout "$target_branch" true

    # 4. 拉取最新代码
    print_message "拉取目标分支最新代码..."
    safe_run git pull origin "$target_branch"

    # 5. 合并源分支
    local merge_strategy
    merge_strategy=$(jq -r '.merge_strategy' "$CONFIG_FILE")
    safe_merge "$ORIGINAL_BRANCH" "$merge_strategy"

    # 6. 推送合并结果
    print_message "推送合并结果到远程仓库..."
    safe_run git push origin "$target_branch"

    # 7. 切换回原分支
    safe_checkout "$ORIGINAL_BRANCH"

    print_success "所有操作执行完成 ✅"
    print_success "分支 $ORIGINAL_BRANCH 已成功合并到 $target_branch"
}

# ===================================
# 主程序
# ===================================

main() {
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -d|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -a|--auto)
                AUTO_MODE=true
                shift
                ;;
            -c|--commit)
                COMMIT_MSG="$2"
                shift 2
                ;;
            -e|--env)
                TARGET_ENV="$2"
                shift 2
                ;;
            --config)
                load_config
                edit_config
                exit 0
                ;;
            --list-envs)
                load_config
                list_environments
                exit 0
                ;;
            --version)
                show_version
                exit 0
                ;;
            *)
                print_error "未知选项: $1"
                show_help
                exit 1
                ;;
        esac
    done

    # 显示脚本标题
    echo -e "${PURPLE}======================================${NC}"
    echo -e "${PURPLE}    Git 分支合并自动化工具 v$SCRIPT_VERSION    ${NC}"
    echo -e "${PURPLE}======================================${NC}"

    # 加载配置
    load_config

    # 验证Git仓库
    validate_git_repo

    # 获取当前分支
    ORIGINAL_BRANCH=$(git branch --show-current)
    print_message "当前分支: ${YELLOW}$ORIGINAL_BRANCH${NC}"

    # 获取用户输入
    get_user_input

    # 显示操作摘要
    show_summary

    # 执行合并操作
    execute_merge
}

# 运行主程序
main "$@"
```

</details>

---
